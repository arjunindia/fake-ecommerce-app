import Head from "next/head";
import { useState, useEffect } from "react";
import { Button, Hero, Countdown, Divider, Alert } from "react-daisyui";
import { motion, AnimatePresence } from "framer-motion";
import { useLocalStorage } from "@rehooks/local-storage";

import Section from "@components/Section";

export default function Home({ data, items, addToCart }) {
  const [show, setShow] = useLocalStorage("showCookiePopUp", true);

  const buttonStyle = (value) => {
    return <Button color="primary">{value}</Button>;
  };
  const icon = `https://loremicon.com/ngon/128/128/94996301/png`;
  return (
    <div className="">
      <Head>
        <title>Fake Ecommerce site - Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={icon} />
      </Head>

      <main className="">
        <Hero
          style={{
            backgroundImage:
              "url(https://api.lorem.space/image/fashion?w=1000&h=800)",
          }}
        >
          <Hero.Overlay />
          <Hero.Content className="text-center py-20">
            <div className="max-w-md flex flex-col items-center">
              <h1 className="text-5xl font-bold text-slate-400 drop-shadow-2xl">
                Discounts on stylish products.
              </h1>
              <p className="py-6 text-gray-400">
                See our collection of beautiful products we know you will love.
                Updated pricing only for a limited time.
              </p>
              <Counter />
              <Divider />
              <Button
                color="primary"
                onClick={() => {
                  window.location.href = "#Clothes";
                }}
              >
                Get Started
              </Button>
            </div>
          </Hero.Content>
        </Hero>

        {data.map((item, index) => (
          <Section
            key={index}
            category={item.name}
            items={items[index]}
            addToCart={addToCart}
          />
        ))}
      </main>

      <CookieAlert show={show} setShow={setShow} />
    </div>
  );
}

function Counter() {
  const [value0, setValue0] = useState(5);
  const [value1, setValue1] = useState(33);
  const [value2, setValue2] = useState(34);
  const countfn = () => {
    const countfnn = () => {
      setValue0((v0) => v0 - 1);
      return 59;
    };
    setValue1((v1) => (v1 <= 0 ? countfnn() : v1 - 1));
    return 59;
  };
  useEffect(() => {
    const timer = setTimeout(() => {
      setValue2((v2) => (v2 <= 0 ? countfn() : v2 - 1));
    }, 1000);

    return () => {
      clearTimeout(timer);
    };
  }, [value0, value1, value2]);

  return (
    <div className="grid grid-flow-col gap-5 text-center auto-cols-max">
      <div className="flex flex-col p-2 bg-neutral rounded-box text-neutral-content">
        <Countdown className="font-mono text-5xl" value={value0} />
        hours
      </div>
      <div className="flex flex-col p-2 bg-neutral rounded-box text-neutral-content">
        <Countdown className="font-mono text-5xl" value={value1} />
        min
      </div>
      <div className="flex flex-col p-2 bg-neutral rounded-box text-neutral-content">
        <Countdown className="font-mono text-5xl" value={value2} />
        sec
      </div>
    </div>
  );
}
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://api.escuelajs.co/api/v1/categories`);
  const data = await res.json();
  const items = await Promise.all(
    data.map((item) => {
      return fetch(
        `https://api.escuelajs.co/api/v1/categories/${item.id}/products?offset=0&limit=4`
      ).then((res) => res.json());
    })
  );
  // Pass data to the page via props
  return { props: { data, items } };
}

function CookieAlert({ show, setShow }) {
  const [hasMounted, setHasMounted] = useState(false);
  useEffect(() => {
    // This will only be called once the component is mounted inside the browser
    setHasMounted(true);
  }, []);
  if (!hasMounted) {
    return null;
  }

  return (
    <AnimatePresence>
      {show && (
        <>
          <motion.div
            className="fixed w-full bottom-0 md:bottom-5 inset-x-1/2 -translate-x-1/2 z-50 md:w-1/2 "
            key="cookiePopUp"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ type: "spring", stiffness: 100 }}
          >
            <Alert
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  className="w-6 h-6 mx-2 stroke-current"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  ></path>
                </svg>
              }
              status="warning"
            >
              <div className="w-full md:flex-row justify-between gap-2">
                <h3 className="text-lg font-bold">
                  This webpage uses cookies!
                </h3>
                <h4 className="">
                  We use cookies to improve user experience. By using this
                  website, you acknowledge the use of cookies to store
                  information on your computer.
                </h4>
              </div>
              <Button
                className=" bg-orange-300 text-black hover:bg-orange-500 px-5"
                onClick={() => {
                  setShow(false);
                }}
              >
                Dismiss
              </Button>
            </Alert>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
}
