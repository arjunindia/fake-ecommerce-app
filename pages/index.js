import Head from "next/head";
import { useState, useEffect } from "react";
import {
  Button,
  Footer,
  Navbar,
  Dropdown,
  Indicator,
  Badge,
  Card,
  Hero,
  Countdown,
  Divider,
  Mask,
  Alert,
} from "react-daisyui";
import { motion, AnimatePresence } from "framer-motion";
import { writeStorage, useLocalStorage } from "@rehooks/local-storage";

import Section from "@components/Section";

export default function Home({ data, items }) {
  const [show, setShow] = useLocalStorage("showCookiePopUp", true);

  const [cart, setCart] = useState([]);
  const [cost, setCost] = useState(0);
  function addToCart(items, price) {
    setCart([...cart, items]);
    setCost(cost + price);
  }
  const buttonStyle = (value) => {
    return <Button color="primary">{value}</Button>;
  };
  const icon = `https://loremicon.com/ngon/128/128/94996301/png`;
  return (
    <div className="">
      <Head>
        <title>Fake Ecommerce site - Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={icon} />
      </Head>
      <div className="pb-5 flex w-full component-preview p-4 items-center justify-center gap-2 font-sans">
        <Navbar>
          <div className="flex-1">
            <Button
              className="text-xl normal-case"
              color="ghost"
              onClick={() => (window.location.href = "/")}
            >
              <Mask
                src={icon}
                alt="Fake Ecommerce logo"
                variant="squircle"
                className=" w-10"
              />

              <span className="px-5">Fake Ecommerce</span>
            </Button>
          </div>
          <div className="flex-none">
            <Dropdown vertical="end">
              <Button tabIndex={0} color="ghost" shape="circle">
                <Indicator item={<Badge size="sm">{cart.length}</Badge>}>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
                    />
                  </svg>
                </Indicator>
              </Button>
              <Dropdown.Menu
                tabIndex={0}
                className="mt-3 card card-compact  w-52 bg-base-100 !p-0"
              >
                <Card.Body className="card-body">
                  {cart.length > 0 ? (
                    cart.map((item, idx) => <span key={idx}>{item}</span>)
                  ) : (
                    <span>Cart is empty</span>
                  )}
                  <span className="text-info">Subtotal: ${cost}</span>
                  <Card.Actions>
                    <Button color="primary" fullWidth>
                      View cart
                    </Button>
                  </Card.Actions>
                </Card.Body>
              </Dropdown.Menu>
            </Dropdown>
            <Dropdown vertical="end">
              <Button color="ghost" className="avatar" shape="circle">
                <div className="w-10 rounded-full">
                  <img src="https://api.lorem.space/image/face?hash=33791" />
                </div>
              </Button>
              <Dropdown.Menu className="w-52 menu-compact">
                <li>
                  <a className="justify-between">
                    Profile
                    <span className="badge">New</span>
                  </a>
                </li>
                <Dropdown.Item>Settings</Dropdown.Item>
                <Dropdown.Item>Logout</Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>
          </div>
        </Navbar>
      </div>
      <main className="">
        <Hero
          style={{
            backgroundImage:
              "url(https://api.lorem.space/image/fashion?w=1000&h=800)",
          }}
        >
          <Hero.Overlay />
          <Hero.Content className="text-center py-20">
            <div className="max-w-md flex flex-col items-center">
              <h1 className="text-5xl font-bold">
                Discounts on stylish products.
              </h1>
              <p className="py-6">
                See our collection of beautiful products we know you will love.
                Updated pricing only for a limited time.
              </p>
              <Counter />
              <Divider />
              <Button
                color="primary"
                onClick={() => {
                  window.location.href = "#Clothes";
                }}
              >
                Get Started
              </Button>
            </div>
          </Hero.Content>
        </Hero>

        {data.map((item, index) => (
          <Section
            key={index}
            category={item.name}
            items={items[index]}
            addToCart={addToCart}
          />
        ))}
      </main>
      <Footer className="p-10 bg-neutral text-neutral-content">
        <div>
          <svg
            width="50"
            height="50"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            fillRule="evenodd"
            clipRule="evenodd"
            className="fill-current"
          >
            <path d="M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z"></path>
          </svg>
          <p>
            ACME Industries Ltd.
            <br />
            Providing reliable tech since 1992
          </p>
        </div>

        <div>
          <Footer.Title>Services</Footer.Title>
          <a className="link link-hover">Branding</a>
          <a className="link link-hover">Design</a>
          <a className="link link-hover">Marketing</a>
          <a className="link link-hover">Advertisement</a>
        </div>
        <div>
          <Footer.Title>Company</Footer.Title>
          <a className="link link-hover">About us</a>
          <a className="link link-hover">Contact</a>
          <a className="link link-hover">Jobs</a>
          <a className="link link-hover">Press kit</a>
        </div>
        <div>
          <Footer.Title>Legal</Footer.Title>
          <a className="link link-hover">Terms of use</a>
          <a className="link link-hover">Privacy policy</a>
          <a className="link link-hover">Cookie policy</a>
        </div>
      </Footer>
      <CookieAlert show={show} setShow={setShow} />
    </div>
  );
}

function Counter() {
  const [value0, setValue0] = useState(5);
  const [value1, setValue1] = useState(33);
  const [value2, setValue2] = useState(34);
  const countfn = () => {
    const countfnn = () => {
      setValue0((v0) => v0 - 1);
      return 59;
    };
    setValue1((v1) => (v1 <= 0 ? countfnn() : v1 - 1));
    return 59;
  };
  useEffect(() => {
    const timer = setTimeout(() => {
      setValue2((v2) => (v2 <= 0 ? countfn() : v2 - 1));
    }, 1000);

    return () => {
      clearTimeout(timer);
    };
  }, [value0, value1, value2]);

  return (
    <div className="grid grid-flow-col gap-5 text-center auto-cols-max">
      <div className="flex flex-col p-2 bg-neutral rounded-box text-neutral-content">
        <Countdown className="font-mono text-5xl" value={value0} />
        hours
      </div>
      <div className="flex flex-col p-2 bg-neutral rounded-box text-neutral-content">
        <Countdown className="font-mono text-5xl" value={value1} />
        min
      </div>
      <div className="flex flex-col p-2 bg-neutral rounded-box text-neutral-content">
        <Countdown className="font-mono text-5xl" value={value2} />
        sec
      </div>
    </div>
  );
}
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://api.escuelajs.co/api/v1/categories`);
  const data = await res.json();
  const items = await Promise.all(
    data.map((item) => {
      return fetch(
        `https://api.escuelajs.co/api/v1/categories/${item.id}/products?offset=0&limit=4`
      ).then((res) => res.json());
    })
  );
  // Pass data to the page via props
  return { props: { data, items } };
}

function CookieAlert({ show, setShow }) {
  const [hasMounted, setHasMounted] = useState(false);
  useEffect(() => {
    // This will only be called once the component is mounted inside the browser
    setHasMounted(true);
  }, []);
  if (!hasMounted) {
    return null;
  }

  return (
    <AnimatePresence>
      {show && (
        <>
          <motion.div
            className="fixed w-full bottom-0 md:bottom-5 inset-x-1/2 -translate-x-1/2 z-50 md:w-1/2 "
            key="cookiePopUp"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ type: "spring", stiffness: 100 }}
          >
            <Alert
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  className="w-6 h-6 mx-2 stroke-current"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  ></path>
                </svg>
              }
              status="warning"
            >
              <div className="w-full md:flex-row justify-between gap-2">
                <h3 className="text-lg font-bold">
                  This webpage uses cookies!
                </h3>
                <h4 className="">
                  We use cookies to improve user experience. By using this
                  website, you acknowledge the use of cookies to store
                  information on your computer.
                </h4>
              </div>
              <Button
                className=" bg-orange-300 text-black hover:bg-orange-500 px-5"
                onClick={() => {
                  setShow(false);
                }}
              >
                Dismiss
              </Button>
            </Alert>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
}
